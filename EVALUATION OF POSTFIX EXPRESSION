#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_STACK_SIZE 100

struct Stack {
    int top;
    int items[MAX_STACK_SIZE];
};

void push(struct Stack *s, int value) {
    if (s->top == MAX_STACK_SIZE - 1) {
        printf("Stack overflow!\n");
        exit(1);
    }
    s->items[++(s->top)] = value;
}

int pop(struct Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow!\n");
        exit(1);
    }
    return s->items[(s->top)--];
}
int evaluate_postfix(char *expr) {
    struct Stack s = { -1 };
    int i, op1, op2, result;
    char token;

    for (i = 0; expr[i] != '\0'; i++) {
        token = expr[i];
        if (isdigit(token)) {
            push(&s, token - '0');
        } else if (token == '+' || token == '-' || token == '*' || token == '/') {
            op2 = pop(&s);
            op1 = pop(&s);
            switch (token) {
                case '+':
                    result = op1 + op2;
                    break;
                case '-':
                    result = op1 - op2;
                    break;
                case '*':
                    result = op1 * op2;
                    break;
                case '/':
                    result = op1 / op2;
                    break;
                default:
                    printf("Invalid operator!\n");
                    exit(1);
            }
            push(&s, result);
        } else {
            printf("Invalid character!\n");
            exit(1);
        }
    }

    return pop(&s);
}
int main() {
    char expr[MAX_STACK_SIZE];

    printf("Enter a postfix expression: ");
    fgets(expr, MAX_STACK_SIZE, stdin);
    expr[strcspn(expr, "\n")] = '\0'; // remove trailing newline from input

    int result = evaluate_postfix(expr);
    printf("Result: %d\n", result);

    return 0;
}
